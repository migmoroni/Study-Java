1-



ÿÿÿ = BC BC, BC (pode haver um sistema que, caso a palavra chegue a ter uma terceira letra, faça uma forma de adicionar mais essa possibilidade)

188 + 188 + 188

Assim, a cada letra, aumenta o multiplicador.

No retorno, é onde mora o problema. Se for 60 + 60 + 60, é menor que 188, 180. Como ele saberá montar o retorno ?
Saberá pois cada casa inicia atraves de uma base minima.

Sendo assim:
0 a 188 + 189 a 376 + 377 a 564 + ... = cada uma contendo 188 indices para as letras desejadas
60 + 248 + 


Sendo assim, dispensa dicionarios. Incluir depois até 512 caracteres, visando palavras de até 100 letras, ou, sequencias de leitura, com 100 letras por vez.

Sequencias de leitura permite usar 100 ciclos, condensando espaços e tudo que tiver no caminho. A cada 100, reseta a contagem.


2-

9, 10

0 -> 0
9 -> 9
10 -> 0, se 17 -> 7

90

9 -> 9
0 -> 0 + 10 = 10, se 7 -> 7 + 10 = 17

a -> a
az -> a + z (z + 26) = 

azz => a + z + z

1 a 4 = intervalo

4 * 4 * 4 * 4 = 256
4 * 4 * 4 * 3 = 192
4 * 4 * 3 * 4 = 192

+7 +6 +5 +4
11 * 10 * 9 * 8 = 7920
11 * 10 * 9 * 7 = 6930
11 * 10 * 8 * 8 = 7040
8 * 7 * 6 * 5 = 1680

+7 +6 +5 +4
11 * 10 * 9 * 8 = 7920 / 20 = 396
11 * 10 * 9 * 7 = 6930 
11 * 10 * 8 * 8 = 7040
8 * 7 * 6 * 5 = 1680


0 a 255

+257 +193 +128 +64
255 * 255 * 255 * 255
0 * 0 * 0 * 0

512 * 448 * 383 * 319 = 28 185 722 880
257 × 193 × 128 × 64 = 406 331 392



valor: 0 a 255
add: 2 a 257 => valor + 2 (ex: 0 +2 = 2, entao 0+2= 2, ex: 5 +2 = 7, entao 5+7 = 12) 

2 a 512 (retorno: -2 e /2)

+40 +30 +20 +10
512 * 512 * 512 * 512
2 * 2 * 2 * 2


valor: 0 a 255


Dicionario me parece ser uma opção a continuar mantendo. Ao menos como primeiro processo.
Adicionalmente, incluir dicionarios de ocorrencias continuas, para reduzir frases inteiras.
Após isso, huffman me parece bom como ultima camada, para reduzir mais ainda.

=>

1º Filtros com regex para compactar corretamente e usar o máximo possivel de unicode de poucos bytes
2º Dicionarios especificos e gerais dos idiomas e linguagens usados
3º Aplicação de huffman (ninebranch)

camada 0: 1 - 9 (9)
camada 1: 1 - 8 (81)
camada 2: A - P (36)




pedido de mudança ao gpt:
Modifique nossa árvore NineBranches, para gerar ao inves de ramos de 1 a 9, ter a seguinte estrutura:

Utilizar de duas árvores de huffman completas:
Onde a primeira é uma árvore de huffman completa, com apenas uso de digitos 0 e 1. Esta árvore é usada apenas para palavras de até 3 caracteres de tamanho.

E uma segunda, sendo uma árvore não binária, utilizando o modelo de 60 ramos: usando os caracteres "2 - 9", continuando em de "A - Z" e "a - z". Esta árvore é usada para palavras maiores que 3 caracteres de tamanho.

No arquivo a ser montado a compressão, de nome "nome-do-arquivo"-dic.bin, quando é alternado para uso da segunda árvore, é inserido os caracteres reservados "1110", onde em um chamado "nome-do-arquivo"-dic-2.bin

Na descompressão, é lido o arquivo dic.bin primeiro, onde ao encontrar sempre um "111", ele le o primeiro elemento que encontra no 